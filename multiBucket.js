// Generated by CoffeeScript 1.3.1
(function() {
  var doMultiPartition, main, partition;

  partition = require('./partition');

  doMultiPartition = function(data, bucketSizes) {
    var i, partitioned, partitionings, sampleData, size, xbuckets, ybuckets;
    sampleData = data;
    partitionings = (function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = bucketSizes.length; _i < _len; i = ++_i) {
        size = bucketSizes[i];
        xbuckets = size[0];
        ybuckets = size[1];
        partitioned = partition(sampleData.samples, sampleData.xmax / xbuckets, sampleData.ymax / ybuckets);
        partitioned.xbuckets = xbuckets;
        partitioned.ybuckets = ybuckets;
        _results.push({
          xbuckets: xbuckets,
          ybuckets: ybuckets,
          buckets: partitioned.data,
          maxBucketSampleCount: partitioned.max
        });
      }
      return _results;
    })();
    return {
      partitionings: partitionings,
      ymax: data.ymax,
      xmax: data.xmax
    };
  };

  main = function() {
    var arg, bucketSizes, data, index, level, _i, _len, _ref;
    bucketSizes = [[100, 200], [200, 200]];
    if (process.argv.length > 2) {
      bucketSizes = [];
      level = [];
      _ref = process.argv;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        arg = _ref[index];
        if (!(index > 1)) {
          continue;
        }
        level.push(parseInt(arg));
        if (index % 2 !== 0) {
          bucketSizes.push(level);
          level = [];
        }
      }
    }
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    data = '';
    process.stdin.on('data', function(chunk) {
      return data += chunk;
    });
    return process.stdin.on('end', function() {
      return process.stdout.write(JSON.stringify(doMultiPartition(JSON.parse(data), bucketSizes)));
    });
  };

  if (!module.parent) {
    main();
  }

}).call(this);
